library(pacman)
p_load(tidyverse)
notes <- read_tsv("data/notes-00000.tsv")
spec()
spec(notes)
p_load(tidyverse,
naniar)
vis_miss(notes)
vis_miss(slice_sample(notes,n = 100000))
vis_miss(slice_sample(notes,n = 10000))
?slice_sample
s_notes <- slice_sample(notes,n = 10000)
spec(notes)
spec(notes)
s_notes <- slice_sample(notes,n = 10000)
vis_miss(s_notes)
table(s_notes$classification,s_notes$misleadingOther)
table(s_notes$classification,s_notes$misleadingFactualError)
s_notes <- slice_sample(notes,n = 10000) %>% filter(classificatio == "NOT_MISLEADING")
s_notes <- slice_sample(notes,n = 10000) %>% filter(classification == "NOT_MISLEADING")
vis_miss(s_notes)
colSums(s_notes)
colSums(as.matrix(s_notes))
s_notes
as.matrix(s_notes)
colSums(as.data.frame(s_notes))
as.data.frame(s_notes)
colSums(as_tibble(s_notes))
as_tibble(s_notes)
as_tibble(s_notes) %>% summarise(colSums(.))
as_tibble(s_notes) %>% summarise(colSums(all.equal.numeric(.)))
as_tibble(s_notes) %>% select_if(is.numeric) %>% summarise(colSums(.))
as_tibble(s_notes) %>% select_if(is.numeric) %>%
map_dbl(sum)
as_tibble(s_notes) %>% select_if(is.numeric) %>%
map_dbl(sum) %>% as_tibble()
as_tibble(s_notes) %>% select_if(is.numeric) %>%
map_dbl(sum) %>% as.data.frame()
notes <- read_tsv("data/notes-00000.tsv")
spec(notes)
s_notes <- slice_sample(notes,n = 10000)
as_tibble(s_notes) %>% select_if(is.numeric) %>%
map_dbl(sum) %>% as.data.frame()
vis_miss(s_notes)
r2 <- read_tsv("data/ratings-00002.tsv")
r3 <- read_tsv("data/ratings-00003.tsv")
library(pacman)
p_load(tidyverse,
lubridate,
naniar)
r2 <- read_tsv("data/ratings-00002.tsv")
r3 <- read_tsv("data/ratings-00003.tsv")
s_r0 <- slice_sample(prop = 0.01)
s_r0 <- r0 %>% slice_sample(prop = 0.01)
s_r2 <- r2 %>% slice_sample(prop = 0.01)
s_r3 <- r3 %>% slice_sample(prop = 0.01)
notes_merged <- left_join(notes_final, rates_summarise, by = join_by(noteId))
bind_cols(s_r0,s_r2)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
bind_rows(s_r0,s_r2)
rates_summarise <-
bind_rows(r0,
#r1,
r2,
r3) %>%
group_by(noteId) %>%
summarise(
ratings = n(),
agreement_rate = sum(agree)/n(),
helpful = sum(helpfulnessLevel =="HELPFUL",na.rm = T),
not_helpful = sum(helpfulnessLevel =="NOT_HELPFUL",na.rm = T)
)
r1 <- read_tsv("data/ratings-00001.tsv")
s_r1 <- r1 %>% slice_sample(prop = 0.01)
rates_summarise <-
bind_rows(s_r0,
s_r1,
s_r2,
s_r3) %>%
group_by(noteId) %>%
summarise(
ratings = n(),
agreement_rate = sum(agree)/n(),
helpful = sum(helpfulnessLevel =="HELPFUL",na.rm = T),
not_helpful = sum(helpfulnessLevel =="NOT_HELPFUL",na.rm = T)
)
notes_merged <- left_join(notes_final, rates_summarise, by = join_by(noteId))
# select the variables that will be used in the model from the notes dataset
notes_final <-
notes %>% select(
noteId,
classification,
trustworthySources,
summary,
isMediaNote
) %>%
mutate(note_length = nchar(summary))
notes_merged <- left_join(notes_final, rates_summarise, by = join_by(noteId))
rates_summarise <-
bind_rows(r0,
r1,
r2,
r3) %>%
group_by(noteId) %>%
summarise(
ratings = n(),
agreement_rate = sum(agree)/n(),
helpful = sum(helpfulnessLevel =="HELPFUL",na.rm = T),
not_helpful = sum(helpfulnessLevel =="NOT_HELPFUL",na.rm = T)
)
notes_merged <- left_join(notes_final, rates_summarise, by = join_by(noteId))
notes_merged
save(notes_merged,file = "data/notes_merged.RData")
load("data/notes_merged.RData")
vis_miss(s_notes)
vis_miss(s_notes==0)
# The variables Believable, harmful, and validation difficulty were Deprecated as of 2022-10-27.
vis_miss(notes_merged)
# The variables Believable, harmful, and validation difficulty were Deprecated as of 2022-10-27.
vis_miss(slice_sample(notes_merged,prop = 0.1))
set.seed(1984)
training_percentage <- 0.75
split_notes <- initial_split(notes_merged,prop = training_percentage)
training_notes <- training(split_notes)
test_notes <- testing(split_notes)
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune)
p_load(ggplot2)
p_load(ggthemes)
split_notes <- initial_split(notes_merged,prop = training_percentage)
training_notes <- training(split_notes)
test_notes <- testing(split_notes)
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune,
ggplot2,
ggthemes)
split_notes <- initial_split(notes_merged,prop = training_percentage)
?initial_split
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune,
ggplot2,
ggthemes)
library(tidymodels)
pacman::p_load(ggplot2)
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune,
ggplot2,
ggthemes)
library(pacman)
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune)
p_load(ggplot2)
p_load(ggthemes)
set.seed(1984)
training_percentage <- 0.75
split_abalone <- initial_split(abalone,prop = training_percentage, strata = type)
training_abalone <- training(split_abalone)
test_abalone <- testing(split_abalone)
library(tidymodels)
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune,
# ggplot2,
ggthemes)
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune,
ggplot2,
ggthemes,
rsample)
split_notes <- initial_split(notes_merged,prop = training_percentage)
training_notes <- training(split_notes)
test_notes <- testing(split_notes)
vis_miss(slice_sample(notes_merged,prop = 0.1))
set.seed(1984)
training_percentage <- 0.75
split_notes <- initial_split(notes_merged,prop = training_percentage)
training_notes <- training(split_notes)
test_notes <- testing(split_notes)
# recipe
rec_reg <- recipe(ratings ~  .,
data = notes_merged %>% select(-c(noteId,summary)))
# linear model
linear_reg <- linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
?set_engine
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune,
ggplot2,
ggthemes,
rsample,
parsnip
)
# linear model
linear_reg <- linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
# Workflow ----
## empty workflow
lm_wkflow <- workflow() %>%
# add model
add_model(linear_reg) %>%
# add receipe
add_recipe(rec_reg)
?add_recipe
p_load(tidyverse,
tidymodels,
recipes,
kknn,
yardstick,
tune,
ggplot2,
ggthemes,
rsample,
parsnip,
workflows
)
# Workflow ----
## empty workflow
lm_wkflow <- workflow() %>%
# add model
add_model(linear_reg) %>%
# add receipe
add_recipe(rec_reg)
# fitting models
fit_lm <-
lm_wkflow %>%
fit(data = training_abalone)
# recipe ----
rec_reg <- recipe(ratings ~  .,
data = training_notes %>% select(-c(noteId,summary)))
# linear model ----
linear_reg <- linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
# Workflow ----
## empty workflow
lm_wkflow <- workflow() %>%
# add model
add_model(linear_reg) %>%
# add receipe
add_recipe(rec_reg)
# fitting models
fit_lm <-
lm_wkflow %>%
fit(data = training_notes)
fit_lm
# metrics
notes_metrics <- metric_set(rmse, rsq, mae)
# linear model
notes_lm_aug <- augment(fit_lm,test_abalone)
# linear model
notes_lm_aug <- augment(fit_lm, test_notes)
notes_metrics(notes_lm_aug, truth = age,
estimate = .pred)
# linear model
notes_lm_aug <- augment(fit_lm, test_notes)
notes_metrics(notes_lm_aug, truth = ratings,
estimate = .pred)
fit_lm
# recipe ----
rec_reg <- recipe(ratings ~  .,
data = training_notes %>% select(-c(noteId,summary))) %>%
step_normalize(agreement_rate)
# linear model ----
linear_reg <- linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
# Workflow ----
## empty workflow
lm_wkflow <- workflow() %>%
# add model
add_model(linear_reg) %>%
# add receipe
add_recipe(rec_reg)
# fitting models
fit_lm <-
lm_wkflow %>%
fit(data = training_notes)
fit_lm
# metrics
notes_metrics <- metric_set(rmse, rsq, mae)
# linear model
notes_lm_aug <- augment(fit_lm, test_notes)
notes_metrics(notes_lm_aug, truth = ratings,
estimate = .pred)
?metric_set
notes_merged %>% ggplot() %>%
notes_merged %>% ggplot() +
geom_point(aes(x=agreement_rate,y=ratings))
knn_mod <- nearest_neighbor(neighbors = k) %>%
set_mode("regression") %>%
set_engine("kknn")
# Workflow ----
## linear ----
lm_wkflow <- workflow() %>%
# add model
add_model(linear_reg) %>%
# add receipe
add_recipe(rec_reg)
## KNNn model ----
knn_wkflow <- workflow() %>%
# add model
add_model(knn_mod) %>%
# add receipe
add_recipe(rec_reg)
## KNN ----
fit_knn <-
knn_wkflow %>%
fit(data = training_abalone)
## KNN ----
fit_knn <-
knn_wkflow %>%
fit(data = training_notes)
## KNN ----
fit_knn <-
knn_wkflow %>%
fit(data = training_notes)
# KNN model
k = 7
knn_mod <- nearest_neighbor(neighbors = k) %>%
set_mode("regression") %>%
set_engine("kknn")
fit_knn
## KNN ----
fit_knn <-
knn_wkflow %>%
fit(data = training_notes)
