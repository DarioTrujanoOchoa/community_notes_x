geom_bar() +
labs(title = "Distribution of Current Status")
### Notes need high agreement to be published ----
notes_merged %>% filter(agreement_rate>0) %>%
ggplot(aes(x = agreement_rate)) +
geom_histogram(binwidth = 0.05) +
labs(title = "Distribution of Agreement Rate")
### Trustworthy sources = Misleading? ----
ggplot(notes_merged, aes(x = classification, fill = factor(trustworthy_sources))) +
geom_bar(position = "dodge") +
labs(title = "Classification by Trustworthy Sources",
fill = "Trustworthy Sources")
sampled_data <- notes_merged[sample(nrow(notes_merged), 100000), ]
# No observed correlation between classification and helpfulness
ggplot(sampled_data, aes(x = helpful_rate, y = not_helpful_rate, color = classification)) +
geom_point() +
labs(title = "Helpful vs Not Helpful Rate by Classification")
### Distribution showing when notes are published ----
ggplot(notes_merged, aes(x = ratings, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 5) +
xlim(0,1000)+
ylim(0,7500)+
labs(title = "Ratings Distribution by Note Status, blue goes up to 50k when near 0 ratings")
### Distribution showing when notes are published ----
ggplot(notes_merged, aes(x = ratings, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 5) +
xlim(0,1000)+
ylim(0,7500)+
labs(title = "Ratings Distribution by Note Status, blue goes up to 50k when near 0 ratings")
### Distribution showing when notes are published ----
ggplot(notes_merged, aes(x = ratings, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 5) +
xlim(0,1000)+
labs(title = "Ratings Distribution by Note Status, blue goes up to 50k when near 0 ratings")
### Distribution showing when notes are published ----
ggplot(notes_merged, aes(x = ratings, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 5) +
xlim(0,100)+
labs(title = "Ratings Distribution by Note Status, blue goes up to 50k when near 0 ratings")
### Distribution showing when notes are published ----
ggplot(notes_merged, aes(x = ratings, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 5) +
xlim(0,25)+
labs(title = "Ratings Distribution by Note Status, blue goes up to 50k when near 0 ratings")
### Distribution showing when notes are published ----
ggplot(notes_merged, aes(x = ratings, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 5) +
xlim(0,25)+
ylim(0,10000)+
labs(title = "Ratings Distribution by Note Status, blue goes up to 50k when near 0 ratings")
### Distribution showing when notes are published ----
ggplot(notes_merged, aes(x = ratings, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 5) +
xlim(0,25)+
labs(title = "Ratings Distribution by Note Status, blue goes up to 50k when near 0 ratings")
### Helpfulness status as a measure of publishability? ----
ggplot(notes_merged, aes(x = helpful_rate, fill = current_status)) +
geom_histogram(position = "dodge", binwidth = 0.05) +
labs(title = "Disagreement Rate by Status")
# =^
ggplot(notes_merged, aes(x = not_helpful_rate)) +
geom_histogram(binwidth = 0.05) +
facet_wrap(~ current_status) +
labs(title = "Disagreement Rate by Status")
# = ^
ggplot(sampled_data, aes(x = helpful_rate, y = ratings, color = current_status)) +
geom_point() +
labs(title = "Helpfulness vs Ratings by Status")
sampled_data <- notes_merged[sample(nrow(notes_merged), 100000), ]
sampled_data <- notes_merged[sample(nrow(notes_merged), 100000), ]
sampled_data <- notes_merged[sample(nrow(notes_merged), 100000), , replace=FALSE]
sampled_data <- notes_merged[sample(nrow(notes_merged), 100000), , replace=TRUE]
sampled_data <- notes_merged[sample(nrow(notes_merged), 100000),replace=TRUE]
sampled_data <- notes_merged[sample(nrow(notes_merged), 100000),replace=TRUE,]
#needs more ratings outliers
# sample with specific ratings classification
notes_merged <- notes_merged %>% filter(!is.na(helpful_unbiased_language))
notes_merged <- notes_merged %>% filter(!is.na(current_status))
# Notes over time
notes_merged %>% ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 86400)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
#Reasons for not helpful
notes_merged %>%
summarise(across(starts_with("not_helpful_"), sum, na.rm = TRUE)) %>%
pivot_longer(everything(), names_to = "Reason", values_to = "Count") %>%
ggplot(aes(x = reorder(Reason, Count), y = Count))+
geom_bar(stat = "identity", fill = "red")+
coord_flip()+
labs(title = "Reasons for Unhelpful Notes", x = "Reason", y = "Count")
#Reasons for helpful
notes_merged %>%
summarise(across(starts_with("helpful_"), sum, na.rm = TRUE)) %>%
pivot_longer(everything(), names_to = "Reason", values_to = "Count") %>%
ggplot(aes(x = reorder(Reason, Count), y = Count))+
geom_bar(stat = "identity", fill = "green")+
coord_flip()+
labs(title = "Reasons for Unhelpful Notes", x = "Reason", y = "Count")
# Not helpful reasons grouped by status
notes_merged %>%
group_by(current_status) %>%
summarise(across(starts_with("not_helpful_"), mean, na.rm = TRUE)) %>%
pivot_longer(-current_status, names_to = "Reason", values_to = "Rate") %>%
ggplot(aes(x = Reason, y = Rate, fill = current_status))+
geom_bar(stat = "identity", position = "dodge")+
coord_flip()+
labs(title = "Not Helpful Reasons grouped by Note Status", x = "Reason", y = "Rate")
# helpful reasons grouped by status
notes_merged %>%
group_by(current_status) %>%
summarise(across(starts_with("helpful_"), mean, na.rm = TRUE)) %>%
pivot_longer(-current_status, names_to = "Reason", values_to = "Rate") %>%
ggplot(aes(x = Reason, y = Rate, fill = current_status))+
geom_bar(stat = "identity", position = "dodge")+
coord_flip()+
labs(title = "Not Helpful Reasons grouped by Note Status", x = "Reason", y = "Rate")
# Note length
notes_merged %>% ggplot(aes(x = note_length, fill = current_status))+
geom_density(alpha = 0.5)+
xlim(0,1000)+
labs(title = "Note length distribution grouped by status", x = "Note Length", y = "Density")
# Correlation between new smaller variables
library(GGally)
sampled_data <- notes_merged[sample(nrow(notes_merged), 10000), ]
# LM's
library(nnet)
lmodel <- multinom(current_status~helpful_rate+not_helpful_rate+
helpful_other+helpful_informative+helpful_clear+
not_helpful_off_topic+not_helpful_incorrect, notes_merged)
summary(lmodel)
lm(current_status~helpful_rate+not_helpful_rate+
helpful_other+helpful_informative+helpful_clear+
not_helpful_off_topic+not_helpful_incorrect, notes_merged)
lm(current_status~helpful_rate+not_helpful_rate+
helpful_other+helpful_informative+helpful_clear+
not_helpful_off_topic+not_helpful_incorrect, notes_merged)
notes_merged <- notes_merged %>% filter(!is.na(current_status))
View(notes_final)
View(small15)
lm(current_status~helpful_rate+not_helpful_rate+
helpful_other+helpful_informative+helpful_clear+
not_helpful_off_topic+not_helpful_incorrect, notes_merged)
#Look at currently scraped tweets
scraped <- read.csv("data/tweets_data1.csv")
View(scraped)
scraped <- scraped %>% filter(text != "DivN/A")
scraped <- scraped %>% filter(Text != "DivN/A")
View(scraped)
str(scraped)
scraped <- scraped %>% rename(tweet_id = Tweet.ID.)
scraped$tweet_id. <- as.numeric(scraped$tweet_id)
notes_merged$tweet_id <- as.numeric(notes_merged$tweet_id)
# Merge only for the 126 tweet IDs in 'scraped'
merged_data <- merge(scraped, notes_merged, by = "tweet_id", all.x = TRUE)
View(merged_data)
scraped <- scraped %>% filter(!is.na(misleading_manipulated_media))
scraped <- scraped %>% filter(!is.na(misleading_other))
str(merged_data)
scraped <- scraped %>% filter(!is.na(helpful_clear))
merged_data <- merged_data %>% filter(!is.na(helpful_clear))
View(merged_data)
str(merged_data)
# Graphs for merged data
ggplot(scraped, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes)))) +
geom_boxplot(fill = "lightblue") +
ggtitle("Likes Distribution by Note Published Status") +
xlab("Note Published") +
ylab("Likes (converted to numeric)") +
theme_minimal()
# Graphs for merged data
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes)))) +
geom_boxplot(fill = "lightblue") +
ggtitle("Likes Distribution by Note Published Status") +
xlab("Note Published") +
ylab("Likes (converted to numeric)") +
theme_minimal()
# Graphs for merged data
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes)))) +
geom_boxplot() +
ggtitle("Likes Distribution by Note Published Status") +
xlab("Note Published") +
ylab("Likes (converted to numeric)") +
theme_minimal()
library(corrplot)
numeric_vars <- scraped[, c("Views", "Replies", "Reposts", "Likes", "Bookmarks")]
numeric_vars <- data.frame(lapply(numeric_vars, function(x) as.numeric(gsub("K", "e3", x))))
cor_matrix <- cor(numeric_vars, use = "complete.obs")
corrplot(cor_matrix, method = "circle", type = "upper", tl.col = "black", tl.srt = 45)
ggplot(merged_data, aes(x = current_status., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot("gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot("gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
# Graphs for merged data
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot("gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
# Graphs for merged data
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
#
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
facet_wrap(~Note.Published.)
#
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
facet_wrap(~Note.Published., scales = "free")
#
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
facet_wrap(~Note.Published.)
#
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
facet_wrap(~Note.Published.)+
coord_flip()
View(notes_merged)
View(scraped)
View(merged_data)
# Graphs for merged data
# NOTES MAKE LIKES GO DOWN
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
# packages and data ----
library(pacman)
p_load(tidyverse,
ggplot2,
corrplot)
# Graphs for merged data
# NOTES MAKE LIKES GO DOWN
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
View(merged_data)
sum(merged_data$Note.Published.)/n()
merged_data %>% group_by(tweet_id) %>% group_by(Note.Published.) %>% summarise(n())
# NOTHING CURRENTLY RATED HELPFUL NOT PUBLISHED AND VICE VERSA
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
facet_wrap(~Note.Published.)+
coord_flip()
View(notes_merged)
View(r15)
View(notes)
View(status)
View(notes_merged)
View(merged_data)
# Graphs for merged data
# NOTES MAKE LIKES GO DOWN
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
# NOTHING CURRENTLY RATED HELPFUL NOT PUBLISHED AND VICE VERSA
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
facet_wrap(~Note.Published.)+
coord_flip()
# Graphs for merged data
# NOTES MAKE LIKES GO DOWN
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
# NOTHING CURRENTLY RATED HELPFUL NOT PUBLISHED AND VICE VERSA
ggplot(merged_data, aes(x = current_status, y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
facet_wrap(~Note.Published.)+
coord_flip()
# Graphs for merged data
# NOTES MAKE LIKES GO DOWN
ggplot(merged_data, aes(x = Note.Published., y = as.numeric(gsub("K", "e3", Likes))))+
geom_boxplot(fill="gray")+
ggtitle("Likes Distribution by Note Published Status")+
xlab("Note Published")+
ylab("Likes")+
theme_minimal()
# Notes over time
notes_merged %>% ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 86400)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
# Notes over time
notes_merged %>% filter(created_at >2023) %>%
ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 30000)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
notes_merged$created_at
lubridate::as_date(notes_merged$created_at)
year(lubridate::as_date(notes_merged$created_at))
# Notes over time
notes_merged %>%
mutate(created_at = lubridate::as_date(notes_merged$created_at)) %>%
filter(year(created_at) >= 2023) %>%
ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 30000)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
# Notes over time
notes_merged %>%
mutate(created_at = lubridate::as_date(notes_merged$created_at)) %>%
filter(year(created_at) >= 2023) %>%
ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 1)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
# Notes over time
notes_merged %>%
mutate(created_at = lubridate::as_date(notes_merged$created_at)) %>%
filter(year(created_at) >= 2024) %>%
ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 1)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
# Notes over time
notes_final %>%
mutate(created_at = lubridate::as_date(notes_merged$created_at)) %>%
filter(year(created_at) >= 2024) %>%
ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 1)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
# Notes over time
notes_merged %>%
mutate(created_at = lubridate::as_date(notes_merged$created_at)) %>%
filter(year(created_at) >= 2024) %>%
ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 1)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
# packages and data ----
library(pacman)
p_load(tidyverse,
ggplot2,
corrplot)
# Notes over time
notes_merged %>%
mutate(created_at = lubridate::as_date(notes_merged$created_at)) %>%
filter(year(created_at) >= 2024) %>%
ggplot(aes(x = created_at, fill = current_status))+
geom_histogram(binwidth = 1)+
theme_minimal()+
labs(title = "Note Status Over Time", x = "Date", y = "Count")
status %>% select(created_at_millis, timestamp_millis_of_current_status)
status %>% mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"), time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01"))
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = time_cs - created_at)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = time_cs - created_at) %>%
select(latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = as.date(time_cs - created_at)) %>%
select(latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = as.Date(time_cs - created_at)) %>%
select(latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = as_date(time_cs - created_at)) %>%
select(latency)
notes_merged$created_at
notes_final$created_at
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = as_date(time_cs - created_at)) %>%
select(created_at, latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_first_non_nmr_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_first_non_nmr_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
filter(time_cs != NA) %>%
select(created_at, time_cs, latency)
status$timestamp_millis_of_first_non_nmr_status
status$timestamp_millis_of_first_non_nmr_status %>% unique()
status$timestamp_millis_of_first_non_nmr_status == NA
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
filter(time_cs != NA) %>%
select(created_at, time_cs, latency)
status %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency)
status %>%
filter(current_status != "NEEDS_MORE_RATINGS") %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency)
status %>%
filter(current_status != "NEEDS_MORE_RATINGS") %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency, current_status)
status$timestamp_millis_of_current_status %>% unique()
status %>%
# filter(current_status != "NEEDS_MORE_RATINGS") %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_current_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency, current_status)
status %>%
filter(current_status != "NEEDS_MORE_RATINGS") %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_status_lock / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency, current_status)
## status
status <- read_tsv("data/raw_data/noteStatusHistory-00000.tsv") %>% clean_names()
p_load(tidyverse,
lubridate,
naniar,
janitor,
forcats)
## status
status <- read_tsv("data/raw_data/noteStatusHistory-00000.tsv") %>% clean_names()
status %>%
filter(current_status != "NEEDS_MORE_RATINGS") %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_status_lock / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency, current_status)
status %>%
filter(current_status != "NEEDS_MORE_RATINGS") %>%
mutate(created_at = as.POSIXct(created_at_millis / 1000, origin = "1970-01-01"),
time_cs = as.POSIXct(timestamp_millis_of_first_non_nmr_status / 1000, origin = "1970-01-01")) %>%
mutate(latency = (time_cs - created_at)) %>%
select(created_at, time_cs, latency, current_status)
